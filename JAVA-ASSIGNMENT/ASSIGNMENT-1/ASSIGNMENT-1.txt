Q1.What is the difference between Compiler and Interpreter
ANS)Compiler -> It is a software which takes sourcecode(HLL) as the input and generates MLL code as the ouput
            To convert the HLL code to MLL code compiler will scan the HLL code only once.

Interpreter =>It is a software which takes sourcecode(HLL) as the input and generates MLL code as the ouput
              To convert the HLL code to MLL code interpreter will scan the HLL code mulitple times(depends on the instrcutions). 
Performance measurement of Compiler vs Interpreter
==================================================
   => Compiler will speed up the process ,where as intrpretter will slow down the process.
   => Compiler in one Scan will identify all the problems in the code(if found),where as interpretter will do scanning line by line so
      it takes more time for identifying the problem.




Q2.What is the difference between JDK, JRE, and JVM?
ANS)  => java program to run we need to set up the environment in our machines
  => To set up the environment we need to install JDK software to our machines.
  => JDK stands for Java Development kit, it provides libraries and the requried files to run our java programs
  => JDK :: JRE + JVM
  => JRE :: Java RunTimeEnvironment, It provides suitable environment to run our java program.
  => JVM :: Java Virtual Machine, It is responsible to run our java programs on the basis of MultiTh





Q3.How many types of memory areas are allocated by JVM?
1. Class (Method) Area
The class method area is the memory block that stores the class code, variable code(static variable, runtime constant), method code, and the constructor of a Java program. (Here method means the function which is written inside the class). It stores class-level data of every class such as the runtime constant pool, field and method data, the code for methods.
2. Heap
The Heap area is the memory block where objects are created or objects are stored. Heap memory allocates memory for class interfaces and arrays (an array is an object). It is used to allocate memory to objects at run time

3. Stack 
Each thread has a private JVM stack, created at the same time as the thread. It is used to store data and partial results which will be needed while returning value for method and performing dynamic linking.

Java Stack stores frames and a new frame is created each time at every invocation of the method. A frame is destroyed when its method invocation completes

4. Program Counter Register: 
Each JVM thread that carries out the task of a specific method has a program counter register associated with it. The non-native method has a PC that stores the address of the available JVM instruction whereas, in a native method, the value of the program counter is undefined. PC register is capable of storing the return address or a native pointer on some specific platform.

5. Native method Stacks: 
Also called C stacks, native method stacks are not written in Java language. This memory is allocated for each thread when itâ€™s created And it can be of a fixed or dynamic nature.





Q4.What is JIT compiler?
ANS)Working of JIT Compiler: The JIT compiler is required to speed up the code execution and provide support for multiple platforms. 
Its working is given as follows: 

The JIT compiler converts the Microsoft Intermediate Language(MSIL) or Common Intermediate Language(CIL) into the machine code.
 This is done before the MSIL or CIL can be executed. The MSIL is converted into machine code on a requirement basis i.e.
 the JIT compiler compiles the MSIL or CIL as required rather than the whole of it. 
The compiled MSIL or CIL is stored so that it is available for subsequent calls if required. 




Q5.What are the various access specifiers in Java?
ANS) There are four types of Java access modifiers:
Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.

Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.

Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.

Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package





Q6.What is a compiler in Java?
ANS)In general, a compiler changes the source code to the target code. Typically, this target code is machine language,
 and it varies from machine to machine. However, the Java compiler changes the source code to byte code which serves as a transitional code.

This form of code is machine-independent, which implies that you can run it on any platform providing a virtual machine for Java or
 Java Virtual Machine (JVM). JVM operates like an interpreter.




Q7.Explain the types of variables in Java?
ANS)Java variable is a name given to a memory location. It is the basic unit of storage in a program.
1. Local Variables 
A variable defined within a block or method or constructor is called a local variable. 

These variables are created when the block is entered, or the function is called and destroyed after exiting from the block or when the call returns from the function.
The scope of these variables exists only within the block in which the variables are declared, i.e., we can access these variables only within that block.
Initialization of the local variable is mandatory before using it in the defined scope.

2) instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed.
Unlike local variables, we may use access specifiers for instance variables. If we do not specify any access specifier, then the default access specifier will be used.

3. Static Variables
Static variables are also known as class variables. 
These variables are declared similarly to instance variables. The difference is that static variables are declared using the static keyword within a class outside of any method, constructor, or block.
Unlike instance variables, we can only have one copy of a static variable per class, irrespective of how many objects we create.
Static variables are created at the start of program execution and destroyed automatically when execution ends.





Q8.What are the Datatypes in Java?
ANS)Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:
Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double.
Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.

boolean data type
byte data type
char data type
short data type
int data type
long data type
float data type
double data type






Q9.What are the identifiers in java?
ANS)Identifiers in Java are symbolic names used for identification. They can be a class name, variable name, method name, package name, 
constant name, and more. However, In Java, There are some reserved words that can not be used as an identifier.
For every identifier there are some conventions that should be used before declaring them. Let's understand it with a simple Java program

 identifer is a name in java program.
 identifer can be classname,methodname,variablename,labelname.

Demo: classname
main: methodName
String: className
args  : variablename
x : variableName

What are the rules followed to define a java identifier?
  => The only character allowed for java identifiers is 
  => a to z, A to Z,0 to 9,$,_
  
Can identifier start with digits? No
Is there a restriction on the lenght of identifiers? No
We can't use reserve words as an identifer.
We can use inbuilt classnames and variablenames as identifiers,but it is not a good practise to use.







Q10.Explain the architecture of JVM 
ANS) Java Architecture is internally basically divided into seven segments. It contains a classloader, memory area, execution, etc. 

Classloader: it's a subsystem of JVM used to load class files. When we execute the code, it's loaded by the classloader. There are built-in classloaders in Java.
Bootstrap ClassLoader: This is the first classloader, the superclass of the Extension classloader. It loads the rt.jar file, which contains all files of Java Standard Edition like Java.lang package classes, java.net package classes.
2. Extension ClassLoader: This is the child classloader of Bootstrap and parent classloader of System classloader.
3. System/Application Classloader: It loads the class files from classpath. It is also known as the Application classloader.

Class(Method)Area: Class (Method)Area stores per-class structures such as the constant runtime pool, field and method data, and the form code.
Heap: It is the runtime method where objects are allocated.
Stack: It stores frames and holds local variables and partial results and plays a part in method invocation and return.
 Program Counter Register: This register contains the address of the Java Virtual machine instruction, which is currently being executed. 
Native Method Stack: It has all the native methods applicable in the application. 
Execution Engine: This consists of three parts:
A virtual processor:
Interpreter:
Just-In-Time(JIT) compiler:

